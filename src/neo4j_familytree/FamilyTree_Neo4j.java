/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package neo4j_familytree;

import com.mxgraph.layout.hierarchical.mxHierarchicalLayout;
import com.mxgraph.model.mxICell;
import com.mxgraph.swing.mxGraphComponent;
import com.mxgraph.util.mxConstants;
import org.neo4j.driver.*;

import org.jgrapht.ListenableGraph;
import org.jgrapht.ext.JGraphXAdapter;
import org.jgrapht.graph.DefaultDirectedGraph;
import org.jgrapht.graph.DefaultEdge;
import org.jgrapht.graph.DefaultListenableGraph;
import org.neo4j.driver.types.Node;
import org.neo4j.driver.types.Relationship;
import org.neo4j.driver.Record;

import javax.swing.*;
import java.awt.*;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author COHOTECH
 */
public class FamilyTree_Neo4j extends javax.swing.JFrame {
     private JGraphXAdapter<String, DefaultEdge> jgxAdapter;


    /**
     * Creates new form FamilyTree_Neo4j
     */
    public FamilyTree_Neo4j() {
        initComponents();
        initGraph();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FamilyTree_Neo4j.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FamilyTree_Neo4j.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FamilyTree_Neo4j.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FamilyTree_Neo4j.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FamilyTree_Neo4j app = new FamilyTree_Neo4j();
                app.initGraph();
                app.setVisible(true);
                
            }
        });
    }
    class CustomEdge extends DefaultEdge {
        private String relationshipName;

        public CustomEdge(String relationshipName) {
            this.relationshipName = relationshipName;
        }

        public String getRelationshipName() {
            return relationshipName;
        }

        @Override
        public String toString() {
            return relationshipName;
        }
    }

    private void initGraph() {
        try (Driver driver = GraphDatabase.driver("bolt://localhost:7687", AuthTokens.basic("neo4j", "Phat121002@"))) {
            ListenableGraph<String, DefaultEdge> g = new DefaultListenableGraph<>(new DefaultDirectedGraph<>(DefaultEdge.class));
            jgxAdapter = new JGraphXAdapter<>(g);
            mxGraphComponent component = new mxGraphComponent(jgxAdapter);
            component.setConnectable(false);
            component.getGraph().setAllowDanglingEdges(false);

            // Kiểm tra kích thước mặc định của JFrame
            System.out.println("Default JFrame size: " + getSize());

            // Thêm component vào BorderLayout.CENTER
            add(component, BorderLayout.CENTER);

            try (Session session = driver.session()) {
                String query = "MATCH (n:Information)-[r]->(m:Information) RETURN n, r, m";
                Result result = session.run(query);

                while (result.hasNext()) {
                    Record record = result.next();
                    Node node1 = record.get("n").asNode();
                    Node node2 = record.get("m").asNode();
                    Relationship relationship = record.get("r").asRelationship();
                    String relationshipName = relationship.get("relation").asString();
                    String node3 = node1.get("name").asString();
                    String node4 = node2.get("name").asString();

                    g.addVertex(node3);
                    g.addVertex(node4);
                    CustomEdge edge = new CustomEdge(relationshipName);
                    g.addEdge(node3, node4, edge);
                }
            }
            mxHierarchicalLayout layout = new mxHierarchicalLayout(jgxAdapter);
            layout.setIntraCellSpacing(50);
            layout.setInterRankCellSpacing(100);
            layout.setOrientation(SwingConstants.NORTH);
            layout.execute(jgxAdapter.getDefaultParent());

            Map<String, Object> style = new HashMap<>();
            style.put(mxConstants.STYLE_FONTSIZE, 30);
            style.put(mxConstants.STYLE_SHAPE, mxConstants.SHAPE_RECTANGLE);
            jgxAdapter.getStylesheet().putCellStyle("NODE_STYLE", style);

            for (Object cell : jgxAdapter.getChildCells(jgxAdapter.getDefaultParent(), true, false)) {
                if (cell instanceof mxICell) {
                    mxICell mxCell = (mxICell) cell;
                    if (mxCell.isVertex()) {
                        mxCell.setStyle("NODE_STYLE");
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error initializing graph: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
